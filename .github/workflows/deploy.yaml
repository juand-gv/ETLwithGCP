name: Deploy project

on:
  push:
    branches:
      - master

jobs:
  deploy-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy BigQuery tables
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          for FILE in bigquery_schemas/*.sql; do bq query --use_legacy_sql=false < $FILE; done


  deploy-csv-to-bigquery:
    needs: deploy-schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy CSV to BigQuery Cloud Function
        run: |
          gcloud functions deploy gc_csv_2_bq \
            --entry-point csv_to_bigquery \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --region us-central1 \
            --source ./load_data \
            --set-env-vars GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

  deploy-append-data:
    needs: deploy-csv-to-bigquery
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Append Data Cloud Function
        run: |
          gcloud functions deploy append_data \
            --entry-point insert_data \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --region us-central1 \
            --source ./api \
            --set-env-vars GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
  
  #  Crear, solo se puede hacer una vez
  # deploy-api-gateway:
  #   needs: deploy-append-data
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Authenticate with Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Prepare OpenAPI configuration file
  #       run: |
  #         sed "s/{{ PROJECT_ID }}/${{ secrets.GCP_PROJECT_ID }}/g" openapi2-functions_template.yaml > openapi2-functions.yaml

  #     - name: Deploy API configuration to API Gateway
  #       run: |
  #         gcloud api-gateway apis create data-migration-api --project=${{ secrets.GCP_PROJECT_ID }}
  #         gcloud api-gateway api-configs create data-migration-config \
  #           --api=data-migration-api \
  #           --openapi-spec=openapi2-functions.yaml \
  #           --project=${{ secrets.GCP_PROJECT_ID }} \
  #           --backend-auth-service-account=${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
  #         gcloud api-gateway gateways create data-migration-gateway \
  #           --api=data-migration-api \
  #           --api-config=data-migration-config \
  #           --location=us-central1 \
  #           --project=${{ secrets.GCP_PROJECT_ID }}

  deploy-backup-to-avro:
    needs: deploy-schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Backup to AVRO Cloud Function
        run: |
          gcloud functions deploy export_table_to_avro \
            --entry-point export_table_to_avro \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --region us-central1 \
            --source ./backup \
            --set-env-vars GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
  
  deploy-backup-workflow:
    needs: deploy-backup-to-avro
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Prepare Workflow configuration file
        run: |
          sed "s/{{ PROJECT_ID }}/${{ secrets.GCP_PROJECT_ID }}/g" ./workflow/backup_workflow_template.yaml > backup_workflow.yaml

      - name: Deploy Workflow
        run: |
          gcloud workflows deploy data-backup-workflow \
            --source=backup_workflow.yaml \
            --location=us-central1

      - name: Check if Cloud Scheduler job exists
        id: check_scheduler
        run: |
          if gcloud scheduler jobs describe run-daily-backup --location=us-central1 --project=${{ secrets.GCP_PROJECT_ID }}; then
            echo "Scheduler job exists."
            echo "::set-output name=exists::true"
          else
            echo "Scheduler job does not exist."
            echo "::set-output name=exists::false"
          fi

      - name: Update Scheduler job if exists
        if: steps.check_scheduler.outputs.exists == 'true'
        run: |
          gcloud scheduler jobs update http run-daily-backup \
            --location=us-central1 \
            --schedule="0 8 * * *" \
            --uri="https://workflowexecutions.googleapis.com/v1/projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/workflows/data-backup-workflow/executions" \
            --oauth-service-account-email ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }} \
            --http-method=POST \
            --message-body='{}' \
            --time-zone="America/Bogota"

      - name: Create Scheduler job if not exists
        if: steps.check_scheduler.outputs.exists == 'false'
        run: |
          gcloud scheduler jobs create http run-daily-backup \
            --location=us-central1 \
            --schedule="0 8 * * *" \
            --uri="https://workflowexecutions.googleapis.com/v1/projects/${{ secrets.GCP_PROJECT_ID }}/locations/us-central1/workflows/data-backup-workflow/executions" \
            --oauth-service-account-email ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }} \
            --http-method=POST \
            --message-body='{}' \
            --time-zone="America/Bogota"

  deploy-restore-from-backup:
    needs: deploy-schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy Restore from avro Cloud Function
        run: |
          gcloud functions deploy restore_table_from_avro \
            --entry-point restore_table_from_avro \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --region us-central1 \
            --source ./restore \
            --set-env-vars GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}

  deploy-restore-workflow:
    needs: deploy-restore-from-avro
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Prepare Workflow configuration file
        run: |
          sed "s/{{ PROJECT_ID }}/${{ secrets.GCP_PROJECT_ID }}/g" ./workflow/restore_workflow_template.yaml > restore_workflow.yaml

      - name: Deploy Workflow
        run: |
          gcloud workflows deploy data-restore-workflow \
            --source=restore_workflow.yaml \
            --location=us-central1
